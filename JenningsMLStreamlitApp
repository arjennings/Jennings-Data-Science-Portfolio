import streamlit as st
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report, roc_auc_score, confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.preprocessing import StandardScaler

# Title
st.title("Interactive ML App: Supervised Learning")

# File Upload
uploaded_file = st.file_uploader("Upload your CSV", type=["csv"])
#this allows the user to be interactive from the beginning, uploading their chosen csv file

if uploaded_file:
    df = pd.read_csv(uploaded_file) #now we read the uploaded csv into the rest of the program
    st.write("Data Preview:", df.head()) #getting an overview of the csv file to situate the user in the data
    
    target = st.selectbox("Select Target Column", df.columns) #this is also an interactivity step, allowing the user to choose what aspect of the data to focus on
    features = [col for col in df.columns if col != target]

    X = df[features]
    y = df[target]

    # Train/Test Split
    test_size = st.slider("Test Size", 0.1, 0.5, 0.2)

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)

    model_choice = st.selectbox("Choose a Model", ["Logistic Regression", "Decision Tree", "K-Nearest Neighbors"])

    if model_choice == "Logistic Regression":
        model = LogisticRegression(max_iter=1000)
    elif model_choice == "Decision Tree":
        max_depth = st.slider("Max Depth", 1, 10, 3)
        model = DecisionTreeClassifier(max_depth=max_depth)
    else:
        k = st.slider("Number of Neighbors (k)", 1, 15, 3)
        model = KNeighborsClassifier(n_neighbors=k)

    if st.button("Train Model"):
        model.fit(X_train, y_train)
        preds = model.predict(X_test)
        st.write("Accuracy:", accuracy_score(y_test, preds))
        st.text("Classification Report:")
        st.text(classification_report(y_test, preds))
